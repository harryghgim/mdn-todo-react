{"version":3,"sources":["components/Form.js","components/Todo.js","components/FilterButton.js","App.js","index.js"],"names":["Form","props","useState","name","setName","onSubmit","e","preventDefault","addTask","className","htmlFor","type","id","autoComplete","value","onChange","target","Todo","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","ref","useEffect","current","usePrevious","editingTemplate","editTask","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","FilterButton","aria-pressed","isPressed","setFilter","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","editedTaskList","map","updatedTasks","remainingTasks","taskList","key","filterList","tasksNoun","length","headingText","listHeadingRef","prevTaskLength","newTask","nanoid","tabIndex","role","aria-labelledby","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4dfef68.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Form(props) {\n  const [name, setName] = useState('');\n\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.addTask(name);\n    setName(\"\");\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n        <h2 className=\"label-wrapper\">\n          <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n            What needs to be done?\n          </label>\n        </h2>\n        <input\n          type=\"text\"\n          id=\"new-todo-input\"\n          className=\"input input__lg\"\n          name=\"text\"\n          autoComplete=\"off\"\n          value={name}\n          onChange={handleChange}\n        />\n        <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n          Add\n        </button>\n      </form>\n  )\n};\n\n\nexport default Form;\n","import React, { useEffect, useRef, useState } from \"react\";\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nexport default function Todo(props) {\n  const [isEditing, setEditing] = useState(false);\n  const [newName, setNewName] = useState('');\n  const editFieldRef = useRef(null);\n  const editButtonRef = useRef(null);\n  const wasEditing = usePrevious(isEditing);\n\n  function handleChange(e) {\n    setNewName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n\n  const editingTemplate = (\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <label className=\"todo-label\" htmlFor={props.id}>\n          New name for {props.name}\n        </label>\n        <input\n          id={props.id}\n          className=\"todo-text\"\n          type=\"text\"\n          value={newName}\n          onChange={handleChange}\n          ref={editFieldRef}\n        />\n      </div>\n      <div className=\"btn-group\">\n        <button\n          type=\"button\"\n          className=\"btn todo-cancel\"\n          onClick={() => setEditing(false)}\n        >\n          Cancel\n          <span className=\"visually-hidden\">renaming {props.name}</span>\n        </button>\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n          Save\n          <span className=\"visually-hidden\">new name for {props.name}</span>\n        </button>\n      </div>\n    </form>\n  );\n\n  const viewTemplate = (\n    <div className=\"stack-small\">\n      <div className=\"c-cb\">\n        <input\n          id={props.id}\n          type=\"checkbox\"\n          defaultChecked={props.completed}\n          onChange={() => props.toggleTaskCompleted(props.id)}\n        />\n        <label className=\"todo-label\" htmlFor={props.id}>\n          {props.name}\n        </label>\n      </div>\n      <div className=\"btn-group\">\n        <button \n          type=\"button\"\n          className=\"btn\" \n          onClick={() => setEditing(true)}\n          ref={editButtonRef}\n        >\n          Edit <span className=\"visually-hidden\">{props.name}</span>\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn__danger\"\n          onClick={() => props.deleteTask(props.id)}\n        >\n          Delete <span className=\"visually-hidden\">{props.name}</span>\n        </button>\n      </div>\n    </div>\n  );\n\n  useEffect(() => {\n    if (!wasEditing && isEditing) {\n      editFieldRef.current.focus();\n    } \n    if (wasEditing && !isEditing) {\n      editButtonRef.current.focus();\n    }\n  }, [wasEditing, isEditing]);\n\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n}\n","import React from \"react\";\n\nfunction FilterButton(props) {\n  return (\n    <div className=\"filters btn-group stack-exception\">\n      <button \n        type=\"button\" \n        className=\"btn toggle-btn\" \n        aria-pressed={props.isPressed}\n        onClick={() => props.setFilter(props.name)}\n      >\n        <span className=\"visually-hidden\">Show </span>\n        <span>{props.name}</span>\n        <span className=\"visually-hidden\"> tasks</span>\n      </button>\n    </div>\n  );\n}\n\nexport default FilterButton;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport Todo from \"./components/Todo\";\nimport FilterButton from \"./components/FilterButton\";\nimport { nanoid } from \"nanoid\";\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spreat to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    })\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map(task => (\n    <Todo \n      id={task.id} \n      name={task.name} \n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ));\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n  const tasksNoun = taskList.length !== 1 ? 'tasks': 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  const listHeadingRef = useRef(null);\n\n  const prevTaskLength = usePrevious(tasks.length);\n\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <Form addTask={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n        );\n      }\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst DATA = [\n    {id: \"todo-0\", name: \"Eat\", completed: true},\n    {id: \"todo-1\", name: \"Sleep\", completed: false},\n    {id: \"todo-2\", name: \"Repeat\", completed: false}\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks={DATA} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}